BUGS

Apparently it is possible to set up session-with/session-without rules
that result in a blank notification message. (Likely due to excess
capture group in match rules.)

Should really lock size file, only read and write necessary logfile
entries.

Could use general cleanup, more sensible config file parsing (e.g.,
make use of global/host/log context and restrict directives appropriately,
build some useful subroutines to eliminate duplication, have some errors
displayed instead of everything emailed.

Macro post-processing will improperly match IP addresses that contain
other IP addresses, and do substitution or appending inside the full
IP address. One way to solve (a tough one) is to have post-processing track
which macros are used in each match line and only do appending or substitution
for those, even including the context of the match from the match line,
which should be sufficient to prevent the false positive matches.
Easier quick fix is to special-case IP address macros, and when searching
for them, anchor each end against likely separators (beginning of line,
:, whitespace for the left hand side, end of line, :, ., whitespace for
the right hand side). (DONE, also uses right bracket for right hand side)

Set up a separate user, use privilege separation and pledge.

FEATURES:

* Add match-table and exclude-table, which give a filename of a lookup
  table -- extra argument that goes with match/exclude, or replaces it?
  Should tell what part of the log string to compare against lines of the
  table. Table contents should also be able to be regexps. (Would this
  be any more efficient? If not, no value.)

* The cyclog/multilog logic for looking at prior log files should
  also be implemented for standard logfiles that have been rotated.
* Add action to re-log specific indicators from a log entry into
  an indicator log in something like Fortinet's log format, which
  identifies source host, source log, date/time from the original log
  entry, the specific indicators (e.g., source IP/port, dest IP/port,
  client IP, protocol, permitted or blocked, mail from/rcpt to/subject,
  etc. Such a log would be useful for auto-generation of block and monitor
  lists for pf. This might be a replacement for the below script idea?
* Finish action: execute <script>
* Create a separate parsing script for both pf and DNS query logs,
    which keeps a database of observed IP addresses/ports and IP
    addresses/domain queries, along with first seen time, last seen
    time, number of times seen.  Generate alerts for novelty,
    i.e., newly appearing, newly appearing after an absence, and
    appearing in multiple places/contexts for the first time (pf).
* Set up a _reportnew user?  Drop privs more generally?

* Process accounting time granularity is only to the nearest minute(?),
and so any new commands which immediately followed the last seen, within
the same minute, will not be shown in the next run--it will stop just before
them.

It would be nice to add a time component after the regexp. Maybe
   days:<day-of-week-list-or-range> hours:<hour-of-week-list-or-range>

I.e.:

log: /var/account/acct
match: /root/
exclude: /acceptable commands/
match: /lippard/ hours:0-5,22-24
exclude: none
notify: user@host

Better:  allow triples per log:
match: /xxx/ <time option>
exclude: /yyy/ <time option>
action: [notify emailaddr|alert]
(or notify: emailaddr for backwards compatibility)
match:
exclude:
action:
etc. Support at least ten per log.
DONE.

Maybe it would be better to just use action: execute and pass to a
script.

Time options:
  [days: <day-list>] [hours: <hour-list>]
  <day-list>: [<day>|<day-range>][,<day>|<day-range>]
  <day>: [<dow>|<dom>]
  <day-range>: [<day>-<day>|weekends|weekday]
  <hour-list>: [<hour>|<hour-range>][,<hour>|<hour-range>]
  <hour>: 0-24
  <hour-range>: <hour>-<hour>

Data structure: Array of days, array of hours, where each element is
an individual day/hour or range, in numeric form.

Algorithm:  Match requires that the time stamp of log entry matches the
conjunction of one or more day and hour (or day and hour ranges).  It's
the conjunction of day/hour, disjunction within day/hour.  (What if I want
a day/hour conjunction?  Hmm. Should allow multiple days/hours pairs.)

Set up some examples...

match: /lippard use of sudo/ days:Sun-Thu hours:0-5,22-24 days:Fri-Sat hours:05
exclude: none
action: text user@host

Actually, don't like weekdays/weekends, as the above example illustrates,
unless "weekend" means Fri-Sat, not Sat-Sun.

Would also like to be able to do field matching, which requires parsing
out fields...

Note that lastcomm will take a username or commandname as an argument
and do that level of filtering for you.


Would also like to add ability to customize subject on notification:

default notify-subject: %hostname% %logfile%
notify-subject:

Make session matching work across log rotation boundaries.

Create all temp files in one temp dir, perhaps use to save data for matching across log rotation boundaries.
   All hash arrays are per-log, so could create a separate file for each match/exclude/action rule per log.
   Need to carry the session_match_array across, as well as the notify_arrays.

three conditions for needing temp dir:
(1) process accounting logs (known from config) [currently single file -- should put it in the temp dir though]
(2) session matches (known from config) -- now no longer thinking this needs temp dir
(3) rotated logs (known before check_logfile invocation)  &gunzip_logfile, &cleanup_gunzip_temp

Session matching as implemented:

match: session-with /[a-f0-9]{16} smtp/
exclude: session-without /([a-f0-9]+) smtp failed-command/
action: notify ...

will collect the match: session-with lines, and will collect the matching group from the exclude line, and only notify on what matches both.

Other things I might want to be able to do:
Match all lines from one match to another?  match: start-with / exclude: end-after?

Definitely want to be able to do this matching across log rotations.
Two options:
(1) Rebuild implementation of log rotation and cyclog/multilog handling to not require multiple calls to check_logfile (i.e., do it internally).
(2) Save the relevant arrays (notify_arrays, session_match_arrays) to a file, hold off on actions to the next check_logfile invocation (i.e., add an option to check_logfile
    to save the data and restore the data, and not do actions until the last call).
(3) for the current kind of session match, it would be sufficient to grep or zgrep one prior log file [keeping in mind that the current logfile might be a rotated one] for
    the collected matches, without bothering to save any information across invocations of check_logfile. This is probably simplest -- pass a flag that indicates to do this.

It might be best to build log objects that track multiple names, rotation format and type, etc.

